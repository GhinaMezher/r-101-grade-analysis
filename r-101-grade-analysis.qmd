---
title: "Grade analysis"
author: "Ghina Mezher"
format: html
---

Before starting our Grade analysis lab we have to call all libraries used in our code, define the trajectory and call our database onto a variable called "df" for data frame. 

```{r message=FALSE}
here::i_am("r-101-grade-analysis.Rproj")
library(here)
library(ggplot2)
library(dplyr)
library(vroom)
library(tidyr)
library(stringr)
```

## Question 1
```{r message=FALSE}
df<-vroom(here("grades.csv"))
na.rm=TRUE
```

## Question 2

```{r}
df|>
  summarise("Minimum"=min(`Exam`,na.rm=TRUE),"Maximum"=max(`Exam`,na.rm=TRUE),"Median"=median(`Exam`,na.rm=TRUE),"Mean"=mean(`Exam`,na.rm=TRUE))|>
  knitr::kable()
```
## Question 3
```{r}
sum(is.na(df$Exam))
```
`r sum(is.na(data$Exam)` students who did not pass the final exam. 

## Question 4
```{r}
df|>ggplot(aes(x=Exam))+
  geom_histogram(binwidth=2,fill="darkred",color="red",na.rm=TRUE)+
  labs(title= "Distribution of Exam grades",
       x="Grades to the final exam",
      y="Frequency of grades")
```
A histogram is a great way to represent distribution of grades as the variable "grades" is a continuous and not discrete. 
We have chosen the color red because exams are scary!


## Question 5
```{r}
group_counts<-df|>
  group_by(Group)|>
  summarise(Number=n())

knitr::kable(group_counts)
```
We could stop our code at summarise and simply call on the group_counts variable in order to print the table. However using knitr::kable gives us a cleaner result. 

## Question 6
```{r}
ggplot(group_counts,aes(y=Group,x=Number))+
  geom_col(fill="darkblue")+
  labs(title="Number of students per group",x="Groups",y="Number of students")
```
The variable group is discrete, so a column graph is a great representation. We have chosen to put the groups on the Y axis in order to be able to read each group number as they are all smushed together on the X axis. 

## Question 7
```{r warning=FALSE}
#first option
ggplot(df,aes(x=Exam, color=Group))+
  geom_density()


#Second option
ggplot(df,aes(x=Group, y=Exam))+
  geom_boxplot(fill="darkgreen")+
  labs(title="Distribution of grades to the final exam according to groups",x="Groups",y="Grades to the final exam")+
  coord_flip()
```
Our first plot represent each group as an individual function with its own color. It is harder to read than the 2nd graph as each individual line is hard to decipher. 
The second graph however separates each group on its own and gives us the median and maximum value. It gives us additional and clear information that helps us compare groups.


## Question 8
```{r}
na_grades<-df|>
  group_by(Group)|>
  summarise("Number of students missing"=sum(is.na(Exam)))

knitr::kable(na_grades)
```
## Question 9
```{r}
ggplot(na_grades,aes(x=Group,y=`Number of students missing`))+
  geom_col(fill="purple")+
  labs(title="Missing students to the final exam by group", x="Groups",y="Number of missing students")+
  coord_flip()
```
## Question 10
```{r}
reshape_df<-df|>pivot_longer(cols=-c(Id,Group))
```
By writing "-c(Id,Group)" we are able to keep the variables Id and Group unchanged after pivoting. 
We therefore get for each student Id their group, the test we want to look at in "name" and the grade they got in "value" on the same row.

#Question 11
```{r}
NA_count<-reshape_df|>
  group_by(Id)|>
  summarise("Missing grade"=sum(is.na(value)))

knitr::kable(NA_count)
```
## Question 12
```{r}
NA_count|>
  ggplot(aes(x=Id,y=`Missing grade`))+
  geom_col()+
  labs(title="Missing grades per Student",
       x="Student Id",
       y="Missing grade count")
```
There being a lot of students, the graph is really hard to read, we will see in the following questions how defining the number of missing grades by group is easier to read.

##Question 13
```{r}
missed_exam_group<-reshape_df|>
  filter(str_starts(name,"Exam"))|>
  group_by(Group)|>
  summarise("No grade for the exam"=sum(is.na(value)))
missed_exam_group
```


## Question 14
```{r}
NA_count_online<-reshape_df|>filter(str_starts(name,"Online_"))|>
  group_by(Id)|>
  summarise("Missing grade"=sum(is.na(value)))

knitr::kable(NA_count_online) 
```
With the command filter and str_starts we are able to select all the variables concerning online testing without having to type each variable title out. We use the reshaped data frame in order to select the exams we are looking for with the variable "name".

## Question 15
```{r}
grades_NA<-df|>
  rowwise()|>
  mutate(NA_count=sum(is.na(c_across(starts_with("Online")))))
  
grades_NA_res<-grades_NA|>
  group_by(NA_count)|>
  summarise(mean=mean(Exam,na.rm=TRUE))

ggplot(grades_NA_res,aes(x=NA_count,y=mean))+
  geom_col()+
  ylim(0,20)+
  labs(title="Exam grades according to number of online tests missed",
       x="Numbers of online tests missed",
       y="Grade to the exam")
  
```
We start by adding a variable to our initial data frame that counts the number of NA values for our online exams. We notice that some students have the same number of missing values for online exams. We must then calculate the mean of the Exam for these students. 
The second step is to rearrange these values in a separate variable and compute the mean exam grade for each "category" of students (each category being defined by the number of online tests missed).
We then represent our result in a column graph.
We add ylim(0,20) to take into account that the exam is graded over 20. However it makes reading the exact values of the exam variable for each column hard.

## Question 16
```{r}
missed<-df|>
  rowwise()|>
  mutate("Missed an online test"=any(is.na(c_across(starts_with("MCQ_")))))

missed_id<-missed|>
  select(Id,`Missed an online test`)

knitr::kable(missed_id)
  
```
The command any(is.na()) replaces an if command that would go through each exam seeing if there is an NA value. It gives us a TRUE if there is at least one answer TRUE to the is.na() command and FALSE if there is none. 
Rowwise() makes it possible to read values for each row and is needed to make our any(is.na()) command work.

## Question 17
```{r}
missed_group<-missed|>
  group_by(Group)|>
  summarise(P_missed=sum(`Missed an online test`)/n()*100)

knitr::kable(missed_group)
```
##Question 18
```{r}
Exam_group<-df|>
  group_by(Group)|>
  summarise(mean=mean(Exam,na.rm=TRUE))

Exam_missed<-inner_join(missed_group,Exam_group,by="Group")|>
  ggplot(aes(x=P_missed,y=mean,fill=Group))+
  geom_hex()+
  labs(title="Every group's average grade at the Exam according to the percentage of missed MCQ gradse",
       x="Percentage of students who missed at least one MCQ",
       y="Average grade to the final exam")
Exam_missed
```
We decide to give each group a separate color in order to read each group's placement on the graph. 
With this graph we are able to read the impact of missing at least one MCQ on the final Exam grade. 
